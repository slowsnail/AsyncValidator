@charset "utf-8";

// 定义 btn 的基础构造
@mixin _btn {
    display: inline-block;
    width: map-get($btn, width);
    height: map-get($btn, height);
    line-height: map-get($btn, height);
    padding: map-get($btn, padding);
    vertical-align: top;
    @include border(
        $border-width: map-get($btn, border-width),
        $border-color: map-get($btn, border-color),
        $radius: map-get($btn, radius)
    );
    // 当使用 button 元素时清除默认边框（不推荐使用 input，因为边框使用伪元素实现）（
    border: 0 none;
    background-color: map-get($btn, bgcolor);
    color: map-get($btn, color);
    font-size: map-get($btn, font-size);
    text-align: center;
    cursor: pointer;
    &:active {
        &::after {
            border-color: map-get($btn, active-border-color);
        }
        background-color: map-get($btn, active-bgcolor);
        color: map-get($btn, active-color);
    }
    &-disabled {
        opacity: 1;
        cursor: not-allowed;
        &,
        &:active {
            &::after {
                border-color: lighten(map-get($btn, border-color), 12%);
            }
            background-color: lighten(map-get($btn, bgcolor), 15%);
            color: lighten(map-get($btn, color), 40%);
        }
    }
}

/**
 * @module element
 * @method yo-btn
 * @description 构造按钮的自定义使用方法。勿使用 `input` 标签，因为边框为 `::after` 实现
 * @param {String} $name 定义扩展名
 * @param {Length} $border-width 边框厚度
 * @param {Color} $border-color 边框色
 * @param {Color} $bgcolor 背景色
 * @param {Color} $color 文本色
 * @param {Color} $active-border-color 触点（鼠标，手指或其他）按下时边框色
 * @param {Color} $active-bgcolor 触点（鼠标，手指或其他）按下时背景色
 * @param {Color} $active-color 触点（鼠标，手指或其他）按下时文本色
 * @param {Length} $padding 内补白
 * @param {Length} $radius 圆角半径长度
 * @param {Length} $font-size 字号大小
 * @param {Length} $width 宽度
 * @parma {Length} $height 高度
 */

@mixin yo-btn(
    $name: default,
    $border-width: default,
    $border-color: default,
    $bgcolor: default,
    $color: default,
    $active-border-color: default,
    $active-bgcolor: default,
    $active-color: default,
    $padding: default,
    $radius: default,
    $font-size: default,
    $width: default,
    $height: default
    ) {
    // 区别是否新增实例还是修改本身
    $name: if($name == default, "", "-#{$name}");
    // 如果值为default，则取 config 的定义c
    @if $border-width == default {
        $border-width: map-get($btn, border-width);
    }
    @if $border-color == default {
        $border-color: map-get($btn, $border-color);
    }
    @if $bgcolor == default {
        $bgcolor: map-get($btn, bgcolor);
    }
    @if $color == default {
        $color: map-get($btn, color);
    }
    @if $active-border-color == default {
        $active-border-color: map-get($btn, active-border-color);
    }
    @if $active-bgcolor == default {
        $active-bgcolor: map-get($btn, active-bgcolor);
    }
    @if $active-color == default {
        $active-color: map-get($btn, active-color);
    }
    @if $padding == default {
        $padding: map-get($btn ,padding);
    }
    @if $radius == default {
        $radius: map-get($btn, radius);
    }
    @if $font-size == default {
        $font-size: map-get($btn, font-size);
    }
    @if $width == default {
        $width: map-get($btn, width);
    }
    @if $height == default {
        $height: map-get($btn, height);
    }

    .yo-btn#{$name} {
        // 如果 $width 不等于 config 设定，则重绘宽度
        @if $width != map-get($btn, width) {
            width: $width;
        }
        @if $height != map-get($btn, height) {
            height: $height;
        }
        @if $padding != map-get($btn, padding) {
            padding: $padding;
        }
        @if $radius != map-get($btn, radius) {
            radius: $radius;
        }
        &::after {
            @if $border-width != map-get($btn, border-width) {
                border-width: $border-width;
            }
            @if $border-color != map-get($btn, border-color) {
                border-color: $border-color;
            }
            @if $radius != map-get($btn, radius) {
                @include responsive(retina1x) {
                    border-radius: $radius;
                }
                @include responsive(retina2x) {
                    border-radius: $radius * 2;
                }
                @include responsive(retina3x) {
                    border-radius: $radius * 3;
                }
            }
        }
        @if $bgcolor != map-get($btn, bgcolor) {
            background-color: $bgcolor;
        }
        @if $color != map-get($btn, color) {
            color: $color;
        }
        @if $font-size != map-get($btn, font-size) {
            font-size: $font-size;
        }
        &:active {
            &::after {
                @if $active-border-color != map-get($btn, active-border-color) {
                    border-color: $active-border-color;
                }
            }
            @if $active-bgcolor != map-get($btn, active-bgcolor) {
                background-color: $active-bgcolor;
            }
            @if $active-color != map-get($btn, active-color) {
                color: $active-color;
            }
        }
        &.yo-btn-disabled {
            &,
            &:active {
                &::after {
                    @if $border-color != map-get($btn, border-color) {
                        border-color: lighten(map-get($btn, border-color), 12%);
                    }
                }
                @if $bgcolor != map-get($btn, bgcolor) {
                    background-color: lighten(map-get($btn, bgcolor), 15%);
                }
                @if $color != map-get($btn, color) {
                    color: lighten($color, 40%);
                }
            }
        }
        // 增量扩展
        @content;
    }
}

.yo-btn {
    @include _btn;
}