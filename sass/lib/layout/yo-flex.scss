@charset "utf-8";

// 定义常见弹性布局
@mixin _flex {
	height: 100%;
	&,
	.flex-inherit {
		@include flexbox;
		@include flex-direction(map-get($flex, direction));
		overflow: hidden;
	}
	> .flex,
	.flex-inherit,
	.flex-inherit > .flex {
		@include flex(1, map-get($flex, direction));
		position: relative;
	}
	> .flex,
	.flex-inherit > .flex {
		@include overflow;
		// 用于解决 flex 无法将动态高度继承给子元素
		// 这里单独处理 flex 的字元素为 yo-flex 的情况，yo-flex 通过绝对定位拉伸来得到高度
		// 请使用 flex-inherit 的方式来进行嵌套（推荐）
		> .yo-flex {
			@include fullscreen;
		}
	}
}

@mixin yo-flex(
	$name: default,
	$direction: default) {
	// 区别是否新增实例还是修改本身
	$name: if($name == default, "", "-#{$name}");
	// 如果值为 default， 则取 config 的定义
	@if $direction == default {
		$direction: map-get($flex, direction);
	}
	.yo-flex#{$name} {
		&,
		.flex-inherit {
			// 如果 $direction 不等于 config 预设，则重绘方向
			@if $direction != map-get($flex, direction) {
				@include flex-direction($direction);
			}
		}
		> .flex,
		.flex-inherit,
		.flex-inherit > .flex {
			// 如果 $direction 不等于 config 预设，则重绘方向
			@if $direction != map-get($flex, direction) {
				@include flex-direction(1, $direction);
			}
		}
		// 增量扩展
		@content;
	}
}

// 调用本文件时载入弹性布局基础构造
.yo-flex {
	@include _flex;
}