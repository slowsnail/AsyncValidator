@charset "utf-8";

/**
 * 全局基础方法
 * 包括响应式方案，CSS3 兼容性方案，厂商前缀，iconfont 方案，flex 布局等全局方法
 */


/**
 * @module 功能
 * @description 给需要的属性加厂商前缀
 * @method _prefix
 * @param {String} $property 指定属性
 * @param {String} $value 指定属性值
 */
@mixin _prefix($property, $value) {
	// 老式浏览器
	// 是否开启厂商前缀支持
	@if map-get($setting, is-vendor-prefix) {
		// 遍历输出厂商代码
		@each $vendor in map-get($setting, vendor-prefix) {
			#{$vendor}#{$property}: $value;
		}
	}
	// 现代浏览器（支持最新草案）
	#{$property}: $value;
}

/**
 * @module 用户界面
 * @description 定义盒模型
 * @method box-sizing
 * @param {String} $box-sizing 指定盒模型类型，取值与`box-sizing`属性一致，默认值：box-box
 */
@mixin box-sizing($box-sizing: border-box) {
	@include _prefix(box-sizing, $box-sizing);
} 

/**
 * @module 功能
 * @description 定义文档根节点是否允许滚动
 * @method root-scroll
 * @param {Boolean} $is-scroll 指定是否有滚动，默认值：false
 */
@mixin root-scroll($is-scroll: false) {
	html,
	body {
		@if $is-scroll {
			overflow: visible;
			height: auto;
		} @else {
			overflow: hidden;
			height: 100%;
		}
	}
}

/**
 * @module 定义如何选中内容
 * @method user-select
 * @param {String} $user-select 取值与`user-select` 属性一致，默认值： none
 */

@mixin user-select($user-select: none) {
	@include _prefix(user-select, $user-select);
}

/**
 * @module 功能
 * @description 定义是否有滚动条
 * @method overflow
 * @param {String} $overflow 取值与最新原生语法一致，默认值： auto
 */

@mixin overflow($overflow: auto) {
	@if $overflow == auto {
		overflow: auto;
		// 移除此条规则，防止 iOS8.0+ webview 崩溃
		-webkit-overflow-scrolling: touch;
	} @else {
		overflow: $overflow;
	}
}

/**
 * @module 用户界面
 * @description 定义 UA 默认外观
 * @method appearance
 * @param {String} $appearance 取值与 `appearance` 属性值一致，默认值：none
 */

@mixin appearance($appearance: none) {
	@include _prefix(appearance, $appearance);
}

/**
 * @module 功能
 * @description 清除浮动方案
 * @method clearfix
 * @parma $type 指定清除浮动的方式，包括：pseudo-element | bfc，默认值：pseudo-element
 */
@mixin clearfix($type: pseudo-element) {
	
	@if $type == pseudo-element {
		// 创建伪元素用以清除自身浮动
		&::after {
			display: block;
			overflow: hidden;
			clear: both;
			height: 0;
			content: "\0020";
		}
	} @else {
		// 创建 BFC 用以清除自身浮动
		overflow: hidden;
	}
}

/**
 * @module 功能
 * @description 定义字体图标
 * @method _yofont
 */

@mixin _yofont() {
	@if map-get($ico, is-use) {
		@font-face {
			font-family: map-get($ico, font-name);
			src: 
				// 现代浏览器
				url(#{map-get($ico, font-path)}#{map-get($ico, font-name)}.woff) format("woff"),
				// Android2.2+
				url(#{map-get($ico, font-path)}#{map-get($ico, font-name)}.ttf) format("truetype");
		}

		.yo-ico {
			font-family: map-get($ico, font-name) !important;
			font-style: normal;
			-webkit-font-smoothing: antialiased;
			// PC 端 Chrome 有锯齿问题，Mobile 不需要
			// -webkit-text-stroke-width: .1px;
			-moz-osx-font-smoothing: grayscale;
			vertical-align: middle;
		}
	}
}

/**
 * @module 文本
 * @description 单行文本溢出时显示省略号
 * @method ellipsis
 * @param {Length} $width 定义容器的宽度，默认值 null
 * @param {Length} $line-clamp 定义需要显示的行数，默认值 1（即使用单行溢出处理方案），需要注意的是本参数只支持webkit内核
 */
@mixin ellipsis($width: null, $line-clamp: 1) {
	overflow: hidden;
	text-overflow: ellipsis;
	width: $width;
	@if abs($line-clamp) > 1 {
		// 要使多行截取生效，display 的值只能为 -webkit-box
		display: -webkit-box !important;
		-webkit-line-clamp: $line-clamp;
		@include flex-direction(column);
	} @else {
		@include wrap(false);
	}
}

/**
 * @method Flexbox
 * @description 定义伸缩盒子元素的流动方向
 * @method flex-direction
 * @param {String} $flex-direction 取值与`flex-direction`属性一致
 */
@mixin flex-direction($flex-direction: row) {
	// 老式浏览器（实验性质支持原始草案）
	// 当厂商前缀不为`-ms-`时输出原始草案厂商前缀
	@if $flex-direction == row {
		@if map-get($setting, is-vendor-prefix) {
			@each $vendor in map-get($setting, vendor-prefix) {
				@if $vendor != -ms- {
					#{$vendor}box-orient: horizontal;
					#{$vendor}box-direction: normal;
				}
			}
		}
	} @else if $flex-direction == column {
		@if map-get($setting, is-vendor-prefix) {
			@each $vendor in map-get($setting, vendor-prefix) {
				@if $vendor != -ms- {
					#{$vendor}box-orient: vertical;
					#{$vendor}box-direction: normal;
				}
			}
		}
	} @else if $flex-direction == row-reverse {
		@if map-get($setting, is-vendor-prefix) {
			@each $vendor in map-get($setting, vendor-prefix) {
				@if $vendor != -ms- {
					#{$vendor}box-orient: horizontal;
					#{$vendor}box-direction: reverse;
				}
			}
		}
	} @else if $flex-direction == column-reverse {
		@if map-get($setting, is-vendor-prefix) {
			@each $vendor in map-get($setting, vendor-prefix) {
				@if vendor != -ms- {
					#{$vendor}box-orient: vertical;
					#{$vendor}box-direction: reverse;
				}
			}
		}
	}

	// 老式浏览器（实验性质支持过度及最新草案）
	@if map-get($setting, is-vendor-prefix) {
		@each $vendor in map-get($setting, vendor-prefix) {
			#{$vendor}flex-direction: $flex-direction;
		}
	}

	// 现代浏览器（支持最新草案）
	flex-direction: $flex-direction;
}

/**
 * @module 文本
 * @description 文本碰到边界是否换行
 * @medthod wrap
 * @param {Boolean} $is-wrap 定义文本是否换行，默认值 true
 */
@mixin wrap($is-wrap: true) {
	@if $is-wrap == true {
		word-wrap: break-word;
		word-break: break-all;
	} @else {
		white-space: nowrap;
	}
}

/**
 * @module 背景与边框
 * @description 为元素添加边框（包括 1px 边框）
 * @method border
 * @param {String} $border-width 指定边框厚度，默认值 1px，取值与`border-width`属性一致，不同方向代表边框未知
 * @param {String} $border-color 指定边框颜色
 * @param {String} $border-style 指定边框样式
 * @param {String} $radius 指定边框圆角半径，默认值 null
 */

@mixin border($border-width: 1px, $border-color: map-get($base, border-color), $border-style: solid, $radius: null) {
	// 为边框未知提供定位参考
	position: relative;
	@if $border-width == null {
		$border-width: 0;
	}
	border-radius: $radius;
	&::after {
		// 用以解决边框 layer 遮盖内容
		pointer-events: none;
		position: absolute;
		z-index: 999;
		top: 0;
		left: 0;
		overflow: hidden;
		content: "\0020";
		border-color: $border-color;
		border-width: $border-width;
		border-style: $border-style;
		// 适配 dpr 进行缩放
		@include responsive(retina1x) {
			width: 100%;
			height: 100%;
			@if $radius != null {
				border-radius: $radius;
			}
		}
		@include responsive(retina2x) {
			width: 200%;
			height: 200%;
			@include transform(scale(.5));
			@if $radius != null {
				border-radius: $radius * 2;
			}
		}
		@include responsive(retina3x) {
			width: 300%;
			height: 300%;
			@include transform(scale(.33333));
			@if $radius != null {
				border-radius: $radius * 3;
			}
		}
		@include transform-origin(0 0);
	}
}

@mixin transform($transform...) {
	@include _prefix(transform, $transform);
}

/**
 * @module 功能
 * @description 定义响应式方案
 * @method responsive
 * @param {String} $media 指定媒体查询条件，取值为`config`文件 map `media-types`中的值
 */
@mixin responsive($media) {
	@if not map-has-key($meida-types, $media) {
		@warn "#{$media} is not a known meida type. Using portrait instead";
		$media: portrait;
	}
	@media #{map-get($meida-types, $media)} {
		@content;
	}
}

@mixin transform-origin($transform-origin) {
	@include _prefix(transform-origin, $transform-origin)
}

/**
 * @module Flexbox
 * @description 定义显示类型为伸缩盒
 * @param {String} $flexbox 默认盒： flex，可选值 flex | inline-flex
 */

@mixin flexbox($flexbox: flex) {
	@if $flexbox == inline-flex or $flexbox == inline {
		$flexbox: "inline-";
	} @else {
		$flexbox: "";
	}
	// 老式浏览器（实验性质支持3个阶段草案）
	// 原始草案： 20090723
	// 过度草案：20110322-20120322（以后面这个日期为准）
	// 最新草案： 20120612-20140925（以后面这个日期为准）
	@if map-get($setting, is-vendor-prefix) {
		@each $vendor in map-get($setting, vendor-prefix) {
			@if $vendor != -ms- {
				// 当厂商前缀不为`-ms-`时输出原始和最新草案厂商前缀
				display: #{$vendor}#{$flexbox}box;
				display: #{$vendor}#{$flexbox}flex;
			} @else {
				// 当厂商前缀为`-ms-`时输出过渡草案厂商前缀版
				display: #{$vendor}#{$flexbox}flexbox;
			}
		}
	}
	// 现代浏览器支持最新草案
	display: #{$flexbox}flex;
}

/**
 * @module Flexbox 
 * @description 定义伸缩盒子元素如何分配空间
 * @method flex 
 * @param {Number} $flex 取值与`flex` 属性一致，默认值：1
 * @param {String} $direction 默认值 row，可选值：row | column 
 */
@mixin flex($flex: 1, $direction: row) {
	// 老式浏览器（实验性质支持3个阶段草案）
	// 原始版本 box-flex 并不是复合属性，所以只有一个为数字的值
	@if map-get($setting, is-vendor-prefix) {
		@each $vendor in map-get($setting, vendor-prefix) {
			@if $vendor != -ms- {
				// 当厂商前缀不为 `-ms-`时输出原始和最新草案厂商前缀
				#{$vendor}box-flex: $flex;
				#{$vendor}flex:$flex;
			} @else {
				// 当厂商前缀为`-ms-`时输出过渡草案厂商前缀
				#{$vendor}flex: $flex;
			}
		}
	}
	// 现代浏览器支持最新草案
	flex: $flex;
	// 修复 Android Browser4.3 及以下，iOS Safari6.1 及以下按比例分配错误的问题（同时还包括 flex 嵌套时分配错误）
	@if $direction == row {
		width: .1px;
	} @else {
		height: .1px;
	}
}

/**
 * @module 功能
 * @description 生成全屏方法
 * @method fullscreen
 * @param {Integer} $z-index: 指定层叠级别
 * @param {Keywords} $position 指定定位方式，取除`static | relative` 之外的值，默认值： absolute
 */
@mixin fullscreen($z-index: null, $position: absolute) {
	position: $position;
	z-index: $z-index;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}

/**
 * @module Flexbox 
 * @description 定义单行弹性容器侧轴对齐方式
 * @method align-items 
 * @param {String} $align-items 取值 `align-items` 属性一致，默认值：center
 */
@mixin align-items($align-items: center) {
	// 老式浏览器（实验性质支持 3 个阶段草案）
	@if $align-items == flex-start {
		@if map-get($setting, is-vendor-prefix) {
			@each $vendor in map-get($setting, vendor-prefix) {
				@if $vendor != -ms- {
					// 当厂商前缀不为 `-ms` 时输出原始和最新菜案厂商前缀
					#{$vendor}box-align: start;
					#{$vendor}align-items: $align-items;
				} @else {
					// 当厂商前缀为`-ms-`时输出过渡草案厂商前缀版
					#{$vendor}flex-align: start;
				}
			}
		}
	} @else if $align-items == flex-end {
		@if map-get($setting, is-vendor-prefix) {
			@each $vendor in map-get($setting, vendor-prefix) {
				@if $vendor != -ms- {
					// 当厂商前缀不为`-ms-`时输出原始和最新草案厂商前缀
					#{$vendor}box-align: end;
					#{$vendor}align-items: $align-items;
				} @else {
					// 当厂商前缀为`-ms` 时输出过渡草案厂商前缀
					#{$vendor}flex-align: end;
				}
			}
		}
	} @else {
		// 取值为 center | baseline | stretch 时，3个阶段草案均相同
		@if map-get($setting, is-vendor-prefix) {
			@each $vendor in map-get($setting, vendor-prefix) {
				@if $vendor != -ms- {
					// 当厂商前缀不为`-ms-`时输出原始和最新草案厂商前缀
					#{$vendor}box-align: $align-items;
					#{$vendor}align-items: $align-items;
				} @else {
					#{$vendor}flex-align: $align-items;
				}
			}
		}
	}
	// 现代浏览器支持最新草案
	align-items: $align-items;
}








